% Some limbo text.
@*Foo. The function |foo| adds twice its argument's value to thrice it.
@l
(defun foo (x)
  (+ @<Twice |x|@> @<Thrice |x|@>))

@ @<The only even prime@>=2
@ @<Twice |x|@>=(* x @<The only...@>)
@ @<Thrice...@>=(* x 3)

@*Bar. The function |bar| returns the first four natural numbers (including 0),
and demonstrates how a named section may be defined piecewise.
@l
(defun bar () '(@<Natural numbers@>))

@ @<Natural...@>=0
@ @<Natural...@>=1
@ @<Natural...@>=@<The only even...@>
@ @<Natural...@>=3

@ Here's a section with no code. None at all. Not even a scrap. It exists
just so that we can make sure that in such an eventuality, everything is
copacetic.

@ This section is just here to use the next one.
@l
@<The next section@>

@ And this section is just to be used by the previous one.
@<The next...@>=
(eval-when (:convenient :easy :desirable)
  (some-stuff)
  (some-more-stuff))

@*Baz. The sole purpose of this section is to exercise some of the
pretty-printing capabilities of |weave|.

@l
(defun read-from-file (file &key direction)
  (with-open-file (stream file :direction direction)
    (loop for x = (read stream nil nil nil) ; |x| is a loop-local variable
          while x collect x)))

(defvar *data-list* '(a b c if 2 3)
  "Some stuff.")

(defun body-forms ()
  (multiple-value-bind (a b c)
      (three-values)
    (foo a)
    (bar)))

(defmacro backq-forms (foo bar list &aux (var (gensym)))
  `(dolist (,var ,list ,list)
     (funcall ,(foo `(,@bar)) ,var)))
